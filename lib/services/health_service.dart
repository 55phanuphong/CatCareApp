import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../models/health.dart';

class HealthService {
  final _firestore = FirebaseFirestore.instance;
  final _auth = FirebaseAuth.instance;

  // ‚úÖ ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á collection ‡∏ï‡∏≤‡∏° userId
  CollectionReference<Map<String, dynamic>> get _healthCollection {
    final userId = _auth.currentUser?.uid;
    if (userId == null) throw Exception("User not logged in");
    return _firestore.collection('users').doc(userId).collection('health');
  }

  /// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö real-time
  Stream<List<Health>> getHealthRecords() {
    final userId = _auth.currentUser?.uid;
    if (userId == null) throw Exception("User not logged in");

    return _healthCollection
        .orderBy('date', descending: false)
        .snapshots()
        .map((snapshot) =>
            snapshot.docs.map((doc) => Health.fromMap(doc.data(), doc.id)).toList());
  }

  /// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏≠‡∏õ)
  Future<List<Health>> getHealthRecordsOnce() async {
    final userId = _auth.currentUser?.uid;
    if (userId == null) throw Exception("User not logged in");

    final snapshot = await _healthCollection
        .orderBy('date', descending: false)
        .get();

    return snapshot.docs
        .map((doc) => Health.fromMap(doc.data(), doc.id))
        .toList();
  }

  /// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
  Future<void> addOrUpdateHealth(Health health) async {
    final userId = _auth.currentUser?.uid;
    if (userId == null) throw Exception("User not logged in");

    if (health.id.isEmpty) {
      // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö auto-id
      final newDoc = _healthCollection.doc();
      await newDoc.set({
        ...health.toMap(),
        'id': newDoc.id,
        'userId': userId,
      });
    } else {
      // ‚úèÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
      await _healthCollection.doc(health.id).set({
        ...health.toMap(),
        'userId': userId,
      }, SetOptions(merge: true));
    }
  }

  /// ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (‡πÉ‡∏ä‡πâ doc.id ‡∏à‡∏≤‡∏Å Firestore)
  Future<void> deleteHealthRecord(String id) async {
    await _healthCollection.doc(id).delete();
  }
}
