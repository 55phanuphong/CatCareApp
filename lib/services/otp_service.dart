import 'dart:math';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';

class OtpService {
  final _auth = FirebaseAuth.instance;
  final _firestore = FirebaseFirestore.instance;

  /// ‚úÖ ‡∏™‡∏∏‡πà‡∏° OTP 6 ‡∏´‡∏•‡∏±‡∏Å
  String _generateOtp() {
    final random = Random();
    return (100000 + random.nextInt(900000)).toString();
  }

  /// ‚úÖ ‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Firestore (‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° SMTP/Nodemailer/Cloud Function)
  Future<bool> sendOtp(String email) async {
    try {
      final otp = _generateOtp();
      final expiresAt = DateTime.now().add(const Duration(minutes: 5));

      await _firestore.collection("otps").doc(email).set({
        "otp": otp,
        "expiresAt": expiresAt.toIso8601String(),
      });

      debugPrint("üì© OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö $email ‡∏Ñ‡∏∑‡∏≠: $otp (‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á)");

      // ‚ùó NOTE: ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ Firebase Cloud Function ‡∏™‡πà‡∏á email OTP ‡∏à‡∏£‡∏¥‡∏á
      return true;
    } catch (e) {
      debugPrint("‚ùå Error sendOtp: $e");
      return false;
    }
  }

  /// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP
  Future<bool> verifyOtp(String email, String otp) async {
    try {
      final doc = await _firestore.collection("otps").doc(email).get();
      if (!doc.exists) return false;

      final data = doc.data()!;
      final savedOtp = data["otp"];
      final expiresAt = DateTime.parse(data["expiresAt"]);

      if (savedOtp == otp && DateTime.now().isBefore(expiresAt)) {
        return true;
      }
      return false;
    } catch (e) {
      debugPrint("‚ùå Error verifyOtp: $e");
      return false;
    }
  }

  /// ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
  Future<bool> resetPassword(String email, String newPassword) async {
    try {
      // Firebase ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ reset ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å client;
      // ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Admin SDK ‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå.
      // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      await _auth.sendPasswordResetEmail(email: email);

      debugPrint("üì© ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå reset password ‡πÑ‡∏õ‡∏ó‡∏µ‡πà $email ‡πÅ‡∏•‡πâ‡∏ß");
      return true;
    } on FirebaseAuthException catch (e) {
      if (e.code == 'user-not-found') {
        debugPrint("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ user: $email");
        return false;
      }
      debugPrint("‚ùå Error resetPassword: $e");
      return false;
    } catch (e) {
      debugPrint("‚ùå Error resetPassword: $e");
      return false;
    }
  }
}
