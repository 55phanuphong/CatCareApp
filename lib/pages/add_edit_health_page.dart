import 'package:flutter/material.dart';
import 'package:timezone/timezone.dart' as tz;
import '../models/health.dart';
import '../models/cat.dart';
import '../services/health_service.dart';
import '../services/cat_service.dart';
import '../services/notification_service.dart';

class AddEditHealthPage extends StatefulWidget {
  final Health? health;
  const AddEditHealthPage({super.key, this.health});

  @override
  State<AddEditHealthPage> createState() => _AddEditHealthPageState();
}

class _AddEditHealthPageState extends State<AddEditHealthPage> {
  final _formKey = GlobalKey<FormState>();
  final _noteController = TextEditingController();
  DateTime _date = DateTime.now();
  TimeOfDay _time = TimeOfDay.now();

  String? _selectedCatId;
  String? _selectedCatName;

  final HealthService _healthService = HealthService();
  final CatService _catService = CatService();

  @override
  void initState() {
    super.initState();
    if (widget.health != null) {
      _noteController.text = widget.health!.note;
      _date = widget.health!.date;
      _selectedCatId = widget.health!.catId;
      _selectedCatName = widget.health!.catName;

      if (widget.health!.time != null) {
        final parts = widget.health!.time!.split(":");
        if (parts.length == 2) {
          _time = TimeOfDay(
            hour: int.tryParse(parts[0]) ?? 0,
            minute: int.tryParse(parts[1]) ?? 0,
          );
        }
      }
    }
  }

  @override
  void dispose() {
    _noteController.dispose();
    super.dispose();
  }

  Future<void> _save() async {
    print("üëÜ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡∏π‡∏Å‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß");

    if (!_formKey.currentState!.validate()) {
      print("‚ùå ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö");
      return;
    }

    if (_selectedCatId == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏°‡∏ß")),
      );
      return;
    }

    final health = Health(
      id: widget.health?.id ?? DateTime.now().millisecondsSinceEpoch.toString(),
      catId: _selectedCatId!,
      catName: _selectedCatName ?? "-",
      title: "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
      note: _noteController.text.trim(),
      date: _date,
      time:
          "${_time.hour.toString().padLeft(2, "0")}:${_time.minute.toString().padLeft(2, "0")}",
    );

    print("üî• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏•‡∏á Firestore...");
    await _healthService.addOrUpdateHealth(health);
    print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");

    // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    final scheduleDateTime = DateTime(
      _date.year,
      _date.month,
      _date.day,
      _time.hour,
      _time.minute,
    );

    print("üìÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á: $scheduleDateTime");
    print("üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${DateTime.now()}");

    if (!scheduleDateTime.isAfter(DateTime.now())) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤")),
      );
      return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏¢‡πà‡∏≠‡∏¢
    final before24h = scheduleDateTime.subtract(const Duration(hours: 24));
    final before3h  = scheduleDateTime.subtract(const Duration(hours: 3));
    print("‚è∞ ‡∏Å‡πà‡∏≠‡∏ô 24 ‡∏ä‡∏°.: $before24h");
    print("‚è∞ ‡∏Å‡πà‡∏≠‡∏ô 3 ‡∏ä‡∏°.:  $before3h");

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á id ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ‡πÅ‡∏•‡πâ‡∏ß offset ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏ä‡∏ô‡∏Å‡∏±‡∏ô
    final baseId   = scheduleDateTime.millisecondsSinceEpoch.remainder(90000000);
    final id24h    = baseId + 1;
    final id3h     = baseId + 2;
    final idOnTime = baseId + 3;

    // 1) ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
    if (before24h.isAfter(DateTime.now())) {
      await NotificationService.I.scheduleNotification(
        id: id24h,
        title: "üì¢ ‡∏≠‡∏µ‡∏Å 1 ‡∏ß‡∏±‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á ${health.catName}",
        body: "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${health.note}",
        scheduledTime: before24h,
        payload: health.id,
      );
      print("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 24 ‡∏ä‡∏°. (id=$id24h)");
    } else {
      print("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 24 ‡∏ä‡∏°. ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏•‡∏¢‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß");
    }

    // 2) ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
    if (before3h.isAfter(DateTime.now())) {
      await NotificationService.I.scheduleNotification(
        id: id3h,
        title: "‚è≥ ‡∏≠‡∏µ‡∏Å 3 ‡∏ä‡∏°. ‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏Ç‡∏≠‡∏á ${health.catName}",
        body: "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°: ${health.note}",
        scheduledTime: before3h,
        payload: health.id,
      );
      print("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ä‡∏°. (id=$id3h)");
    } else {
      print("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 3 ‡∏ä‡∏°. ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏•‡∏¢‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß");
    }

    // 3) ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á
    await NotificationService.I.scheduleNotification(
      id: idOnTime,
      title: "‚è∞ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á ${health.catName} ‡πÅ‡∏•‡πâ‡∏ß!",
      body: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${health.note}",
      scheduledTime: scheduleDateTime,
      payload: health.id,
    );
    print("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (id=$idOnTime)");

    // ‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    await NotificationService.I.showNow(
      title: "üêæ ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
      body:
          "‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ ${health.catName} (‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 24 ‡∏ä‡∏°., 3 ‡∏ä‡∏°. ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤) ‡πÅ‡∏•‡πâ‡∏ß ‚úÖ",
    );

    if (mounted) {
      Navigator.of(context).pop(true);
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ")),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFFFF8E7),
      appBar: AppBar(
        title: Text(widget.health == null ? "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û" : "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"),
        backgroundColor: const Color(0xFFFFF8E7),
        foregroundColor: Colors.brown,
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              StreamBuilder<List<Cat>>(
                stream: _catService.getCats(),
                builder: (context, snapshot) {
                  if (!snapshot.hasData) {
                    return const Center(child: CircularProgressIndicator());
                  }
                  final cats = snapshot.data!;
                  return DropdownButtonFormField<String>(
                    value: _selectedCatId,
                    decoration: _inputDecoration("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏°‡∏ß"),
                    items: cats.map((cat) {
                      return DropdownMenuItem<String>(
                        value: cat.id,
                        child: Text(cat.name),
                        onTap: () => _selectedCatName = cat.name,
                      );
                    }).toList(),
                    onChanged: (value) => setState(() => _selectedCatId = value),
                    validator: (value) =>
                        value == null ? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏°‡∏ß" : null,
                  );
                },
              ),
              const SizedBox(height: 15),
              _buildDatePicker(),
              const SizedBox(height: 15),
              _buildTimePicker(),
              const SizedBox(height: 15),
              TextFormField(
                controller: _noteController,
                decoration: _inputDecoration("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"),
                maxLines: 3,
                validator: (value) =>
                    value == null || value.isEmpty ? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î" : null,
              ),
              const SizedBox(height: 20),
              SizedBox(
                width: double.infinity,
                height: 50,
                child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFFFF9966),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  onPressed: _save,
                  child: const Text("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
                      style: TextStyle(fontSize: 16, color: Colors.white)),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Card _buildDatePicker() => Card(
        color: const Color(0xFFFFC29D),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        child: ListTile(
          title: const Text("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"),
          subtitle: Text("${_date.toLocal()}".split(" ")[0]),
          trailing: const Icon(Icons.calendar_today, color: Colors.brown),
          onTap: () async {
            final picked = await showDatePicker(
              context: context,
              initialDate: _date,
              firstDate: DateTime(2000),
              lastDate: DateTime(2100),
            );
            if (picked != null) setState(() => _date = picked);
          },
        ),
      );

  Card _buildTimePicker() => Card(
        color: const Color(0xFFFFC29D),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        child: ListTile(
          title: const Text("‡πÄ‡∏ß‡∏•‡∏≤"),
          subtitle: Text(_time.format(context)),
          trailing: const Icon(Icons.access_time, color: Colors.brown),
          onTap: () async {
            final picked = await showTimePicker(
              context: context,
              initialTime: _time,
            );
            if (picked != null) setState(() => _time = picked);
          },
        ),
      );

  InputDecoration _inputDecoration(String hint) => InputDecoration(
        hintText: hint,
        filled: true,
        fillColor: const Color(0xFFFFC29D),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
        contentPadding:
            const EdgeInsets.symmetric(vertical: 15, horizontal: 20),
      );
}
